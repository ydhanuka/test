stringbuilder

//no spaces between the dashes 
git - -version => to get the version of the git
git config => for configuration

git config - -global user.name ”Yash Dhanuka” => to change the username 
git config - -global user.email ”ydhanuka@gmail.com” => to change the email

git config - -list => to check the whether the settings have been updated correctly or not

clear => clear the terminal screen

git config user.email => to view only individual settings in this case the email 
git help => reference from git
git help <specific topic> =>the topic in which you need help from the list given by git


pwd => to see where git is looking at the moment 
cd ~ => takes you to the home directory
cd .. =>to go back one folder
ls => to view the names of all the folder there in that directory
cd <user> => go to the specific folder

git init => create the folder as your git project or repository 

ls -la => lists all hidden stuff in context to the folder

git add . => this notifies git about changes and the “.” makes git realise about the folder

git commit -m “ <your message> “ => you are committing git to keep track of changes and the “your message “ is like a label or a reference to the file. Like if you wanna get back to the file at that instant then you need a name 


git log => to view the commit history 
git log - - author = “Yash” => will show commits from yash (the user name) // its case sensitive.

git status => more details of the commit

git add <name of file> => to commit another file in the repository 

//after you modify a text file you need to run the git add <file name> command to add it to the staging area and then you have to run the git commit -m ”“ function

// to add multiple files to the staging are use the following function:
git add .

git diff => show you the difference between the working copy and the repository copy. (i.e. before and after the modification)

[ working copy -> staging copy -> repository copy]
you get the staging copy when you use git add < > function and you get the repository copy when you use the commit function 

git diff - - staged => compares the staging copy with the repository 

git rm <file name> => removes that file from the repository and working copy both
git mv <originam name of file> <new name of file> => it is the move command which is being used to rename a file.

git mv <file to be moved> <folder name>/<new name> => this command moves a file to a folder and can also rename it if you want. if you want to keep the same name you dont have to write anything after the folder name.


git commit -am “”  => to add a file from the working area to the repository directly without adding to the staging area







